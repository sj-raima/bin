#!/bin/sh
die () {
    echo
    echo "------------------------- Environment variables Begin -------------------------"
    env
    echo "-------------------------- Environment variables End --------------------------"
    echo
    echo "-------------------------------------------------------------------------------"
    echo "ERROR: $1 occured in ${program}"
    echo
    echo "   pwd: $PWD"
    echo "-------------------------------------------------------------------------------"
    echo
    exit 2
}

only=no
kmake=no
cmake=
legacy=
make=no
prebuild=no
prebuild_opts=-n
stage0_src=no
stage_src=no
share_src=no
convert_src=no
build=no
package=no
convert_package0=no
package_name=rdm_mini
check=no
prebuild_option=
build_options=

target=

help () {
    echo "$program [<options>] [prebuild | stage0-src | stage-src | share-src |
         convert-src | build | package | convert-package0 | check | test]
Options:
    -p | --package-name PACKAGE      Package to build [rdm_mini]
    -t | --target TARGET             Cross compiled target []
    -B | --build-type BUILD-TYPE     Specify the build type
         --only                      Only do the steps specified
"
}

clone_repository () {
    if [ $only = no ]; then
        rm -rf /var/tmp/b-clone
        git clone . /var/tmp/b-clone || die "Clone repository"
        cd /var/tmp/b-clone || die "Changing working directory to the clone"
    else
        cd /var/tmp/b-clone || die "Changing working directory to the clone"
        git fetch
        git reset --hard origin
    fi
}

build_prebuild () {
    if [ $prebuild = yes ]; then
        ./prebuild.pl --nojava $prebuild_opts $prebuild_option || die "Running prebuild.pl"
    fi
}

stage0_src () {
    if [ $stage0_src = yes ]; then
        release-system/stage0-src.ps1 -p ${package_name} || die "Stage zero source for ${package_name}"
    fi
}

stage_src () {
    if [ $stage_src = yes ]; then
        release-system/stage-src.ps1 '-p' ${package_name} || die "Stage source for ${package_name}"
    fi
}

share_src () {
    if [ $share_src = yes ]; then
        rm -rf "/users/$USER/b-package/release-system" 2>/dev/null
        rm -rf "/users/$USER/b-package/b-${package_name}" 2>/dev/null
        mkdir "/users/$USER/b-package" 2>/dev/null
        cp -a release-system /users/$USER/b-package/. || die "Failed to share release-system"
        cp -a b-${package_name} /users/$USER/b-package/. || die "Failed to share b-${package_name}"
    fi
}

convert_src () {
    if [ $convert_src = yes ]; then
        release-system/convert-src.sh -p ${package_name} || die "Convert source for ${package_name}"
    fi
}

build () {
    if [ $build = yes ]; then
        release-system/build.ps1 $cmake $legacy -p ${package_name} $build_options --host-package-name lnx-x86_64 $target || die "Build for ${package_name}"
    fi
}

package () {
    if [ $package = yes ]; then
        release-system/package.ps1 -p ${package_name} $build_options --host-package-name lnx-x86_64 $target || die "Package for ${package_name}"
    fi
}

convert_package0 () {
    if [ $convert_package0 = yes ]; then
        release-system/convert-package0.ps1 -p ${package_name} --host-package-name lnx-x86_64 $target || die "convert-package0 for ${package_name}"
    fi
}

check () {
    if [ $check = yes ]; then
        release-system/check.ps1 -p ${package_name} $build_options --host-package-name lnx-x86_64 $target || die "Check for ${package_name}"
    fi
}

parse_command_line () {
   program=`basename "$0"`
   while [ $# -gt 0 ]; do
        case "$1" in
            prebuild)
                prebuild=yes
                prebuild_opts=
                shift
            ;;
            stage0-src)
                stage0_src=yes
                shift
            ;;
            stage-src)
                stage_src=yes
                shift
            ;;
            share-src)
                if [ $only = no ]; then
                    stage_src=yes
                fi
                share_src=yes
                shift
            ;;
            convert-src)
                if [ $only = no ]; then
                    stage_src=yes
                fi
                convert_src=yes
                shift
            ;;
            build)
                if [ $only = no ]; then
                    stage_src=yes
                fi
                build=yes
                shift
            ;;
            package)
                if [ $only = no ]; then
                    stage_src=yes
                    build=yes
                fi
                package=yes
                shift
            ;;
            convert-package0)
                if [ $only = no ]; then
                    stage_src=yes
                    build=yes
                    package=yes
                    convert_src=yes
                fi
                convert_package0=yes
                shift
            ;;
            check)
                if [ $only = no ]; then
                    stage_src=yes
                    build=yes
                    package=yes
                fi
                check=yes
                shift
            ;;
            test)
                test=yes
                shift
            ;;
            -B|--build-type)
                shift
                build_options="$build_options --build-type $1"
                shift
            ;;
            -S|--build-shared-libs)
                build_options="$build_options --build-shared-libs"
                shift
            ;;
            -h|--help)
                help
                exit 2
            ;;
            -p|--package-name)
                shift
                package_name=$1
                shift
            ;;
            -t|--target)
                shift
                target="--target $1"
                shift
            ;;
            --only)
                only=yes
                shift
            ;;
            --no-cmake)
                cmake=--no-cmake
                shift
            ;;
            --cmake)
                cmake=--cmake
                shift
            ;;
            --no-legacy)
                legacy=--no-legacy
                shift
            ;;
            --legacy)
                legacy=--legacy
                shift
            ;;
            *)
                echo "Unknown option $1";
                exit 2
            ;;
        esac
    done
}

parse_command_line "$@"

clone_repository
build_prebuild
stage0_src
stage_src
share_src
convert_src
build
package
convert_package0
check
