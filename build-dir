#!/bin/bash

echo_c () {
    echo "    $" "$1"
}

echo_env () {
    if [ -n "$CC" ]; then
        echo_c "CC=\"$CC\"; export CC"
    fi
    if [ -n "$CXX" ]; then
        echo_c "CXX=\"$CXX\"; export CXX"
    fi
    if [ -n "$CPPFLAGS" ]; then
        echo_c "CPPFLAGS=\"$CPPFLAGS\"; export CPPFLAGS"
    fi
    if [ -n "$CFLAGS" ]; then
        echo_c "CFLAGS=\"$CFLAGS\"; export CFLAGS"
    fi
    if [ -n "$CXXFLAGS" ]; then
        echo_c "CXXFLAGS=\"$CXXFLAGS\"; export CXXFLAGS"
    fi
    if [ -n "$LDFLAGS" ]; then
        echo_c "LDFLAGS=\"$LDFLAGS\"; export LDFLAGS"
    fi
    if [ -n "$LIBS" ]; then
        echo_c "LIBS=\"$LIBS\"; export LIBS"
    fi
}

init_options () {
    cpp_flags=
    cmake_opt=
    export CC=gcc
    export CXX=g++
}

setup_base_and_version () {
    case "$base" in
        *-[123456789])
            base=${1%-[123456789]}
            ;;
        *-[123456789][123456789])
            base=${1%-[123456789][123456789]}
            ;;
        *-[123456789][.][0123456789])
            base=${1%-[123456789][.][0123456789]}
            ;;
        *-[123456789][123456789][.][0123456789])
            base=${1%-[123456789][123456789][.][0123456789]}
            ;;
        *-[123456789][.][0123456789][123456789])
            base=${1%-[123456789][.][0123456789][123456789]}
            ;;
        *-[123456789][123456789][.][0123456789][123456789])
            base=${1%-[123456789][123456789][.][0123456789][123456789]}
            ;;
    esac

    _version=${1##$base}
    if [ -n "$_version" ]; then
        export version=${_version#-}
        echo_c "export version=${_version#-}"
    fi
}

setup_cc_and_cxx () {
    CC="$CC$_version"
    CXX="$CXX$_version"
}

setup_native_build_dir () {
    DIR=$(pwd)
    DIR=${DIR%-client}
    NATIVE_BUILD_DIR=$DIR/cmake-build-debug
    if [ ! -d $NATIVE_BUILD_DIR ]; then
        NATIVE_BUILD_DIR=$DIR/b-debug
    fi
}

build_aarch64 () {
    setup_native_build_dir
    CC="aarch64-linux-gnu-gcc$_version"; export CC
    CXX="aarch64-linux-gnu-g++$_version"; export CXX
    CPPFLAGS="-DNDEBUG"; export CPPFLAGS
    CFLAGS="-g"; export CFLAGS
    CXXFLAGS="-g"; export CXXFLAGS
    OBJCFLAGS=""; export OBJCFLAGS
    LDFLAGS=""; export LDFLAGS
    LIBS=""; export LIBS

    echo_env
    echo_c "mkdir b-aarch64"
    mkdir b-aarch64
    echo_c "pushd b-aarch64"
    pushd b-aarch64
    echo_c "$(pwd)/../configure --build=`\`dirname "$0"\`/config.guess` --host=aarch64-unknown-linux-gnu --enable-native-build-dir=$NATIVE_BUILD_DIR"
    $(pwd)/../configure --build=`\`dirname "$0"\`/config.guess` --host=aarch64-unknown-linux-gnu --enable-native-build-dir=$NATIVE_BUILD_DIR
}

build_cross () {
    setup_native_build_dir
    CC="$target-gcc$_version"; export CC
    CXX="$target-g++$_version"; export CXX
    CPPFLAGS="-DNDEBUG"; export CPPFLAGS
    OBJCFLAGS=""; export OBJCFLAGS
    LDFLAGS=""; export LDFLAGS
    LIBS=""; export LIBS

    echo_env
    echo_c "mkdir $dir"
    mkdir $dir
    echo_c "cd $dir"
    cd $dir
    echo_c "$(pwd)/../configure --build=`\`dirname "$0"\`/config.guess` --host=$target --enable-native-build-dir=$NATIVE_BUILD_DIR"
    $(pwd)/../configure --build=`\`dirname "$0"\`/config.guess` --host=$target --enable-native-build-dir=$NATIVE_BUILD_DIR
}

build_cross_debug () {
    target=${base##b-cross-debug-}
    CFLAGS="-O0 -g"; export CFLAGS
    CXXFLAGS="-O0 -g"; export CXXFLAGS

    build_cross
}

build_cross_release () {
    target=${base##b-cross-release-}
    CFLAGS="-g"; export CFLAGS
    CXXFLAGS="-g"; export CXXFLAGS
    
    build_cross
}

build_target () {
    setup_native_build_dir
    target=${base##b-target-}

    echo_env

    echo_c "mkdir $dir"
    mkdir $dir
    echo_c "cd $dir"
    cd $dir
    echo_c "$(pwd)/../target/$target/configure --disable-shared --enable-native-build-dir=$NATIVE_BUILD_DIR"
    $(pwd)/../target/$target/configure --disable-shared --enable-native-build-dir=$NATIVE_BUILD_DIR
}

build_autosar_sim () {
    setup_native_build_dir
    CC="gcc -m32"
    CXX="g++ -m32"
    CPPFLAGS="-DRDM_AUTOSAR_SIM"; export CPPFLAGS
    CFLAGS="-g"; export CFLAGS
    CXXFLAGS="-g"; export CXXFLAGS

    mkdir $dir
    cd $dir
    $(pwd)/../configure --build=`\`dirname "$0"\`/config.guess` --host=$target --disable-shared --enable-native-build-dir=$NATIVE_BUILD_DIR
}

common_options () {
    cpp_flags="$cpp_flags -DRDM_ASSERT_RDM_UNIX"
}

setup_build_dir () {
    echo mkdir cmake-build-$dir
    echo pushd cmake-build-$dir
    echo cmake -DCMAKE_INSTALL_PREFIX=/usr/local/Raima -DCMAKE_C_FLAGS:STRING=\"$cpp_flags\" -DCMAKE_CXX_FLAGS:STRING=\"$cpp_flags\" $cmake_opt -DCMAKE_COLOR_DIAGNOSTICS:BOOL=OFF -DCMAKE_COLOR_MAKEFILE:BOOL=OFF ..
    
    rm  cmake-build-$dir/CMakeCache.txt 2>/dev/null
    mkdir cmake-build-$dir
    pushd cmake-build-$dir
    cmake -DCMAKE_INSTALL_PREFIX=/usr/local/Raima -DCMAKE_C_FLAGS:STRING="$cpp_flags" -DCMAKE_CXX_FLAGS:STRING="$cpp_flags" $cmake_opt -DCMAKE_COLOR_DIAGNOSTICS:BOOL=OFF -DCMAKE_COLOR_MAKEFILE:BOOL=OFF ..

    popd
}

help () {
    echo "Usage: build-dir directory"
    echo
    echo "Specify directory as one of the following:"
    echo     
    echo "    release                CMake release build"
    echo "    debug                  CMake debug build"
    echo "    shared                 CMake debug build with shared libraries"
    echo "    valgrind               CMake debug build suitable for run with"
    echo "                             valgrind"
    echo "    tag-profile            CMake debug build suitable for profiling"
    echo "                             memory allocations"
    echo "    valgrind               CMake debug build suitable for running"
    echo "                           Valgrind with the memcheck plugin"
    echo "    all-source-off         CMake build will all source off"
    echo "    gdb                    CMake debug build suitable for debugging"
    echo "                             where GDB may be started automatically"
    echo "    release-no-os          NO_OS CMake release build"
    echo "    no-os                  NO_OS CMake debug build"
    echo "    tag-fail               CMake build doing failure simulation"
    echo "                             using the QA Framework"
    echo "    file-stdio             CMake build where we use stdio for"
    echo "                             file operations"
    echo "    b-cross-debug-target   Debug cross build using the GNU build"
    echo "                           system for target"
    echo "    b-cross-release-target Debug cross build using the GNU build"
    echo "                           system for target"
    echo "    b-cross-autosar        Autosar cross build using the GNU build"
    echo "                           system for target"
    echo "    b-autosar-sim      Emulate AUTOSAR on Linux"
    echo "    b-clean-cache-size-one Set up a clean cache that can only hold one item"
    echo
    echo "optionally followed by a dash and a dotted version number on any"
    echo "of the following formats:"
    echo
    echo "    -x"
    echo "    -xx"
    echo "    -x.x"
    echo "    -x.xx"
    echo "    -xx.x"
    echo "    -xx.xx"
}

parse_command_line () {
    echo "Run commands as follows to set up a build of" "$1" ":"
    echo
    program=`basename "$0"`
    init_options
    common_options
    dir="$1"
    base="$1"
    setup_base_and_version "$1"

    setup_cc_and_cxx

    case "$base" in
        -h|--help)
            help
            ;;
        release)
            cmake_opt="$cmake_opt -DCMAKE_BUILD_TYPE:STRING=Release"
            setup_build_dir
            ;;
        2release)
            cmake_opt="$cmake_opt -DCMAKE_BUILD_TYPE:STRING=Release"
            setup_build_dir
            ;;
        debug)
            cmake_opt="$cmake_opt -DCMAKE_BUILD_TYPE:STRING=Debug"
            setup_build_dir
            ;;
        all-source-off)
            cmake_opt="$cmake_opt -DCMAKE_BUILD_TYPE:STRING=Debug -DCOMPILE_ALL_SOURCE:STRING=Off"
            setup_build_dir
            ;;
        pack-file-size-1m)
            cmake_opt="$cmake_opt -DCMAKE_BUILD_TYPE:STRING=Debug"
            cpp_flags="$cpp_flags -DPACK_FILE_SIZE_MIN='(1024*1024)'"
            setup_build_dir
            ;;
        shared)
            cmake_opt="$cmake_opt -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_INSTALL_PREFIX:PATH=$(pwd)/cmake-build-shared"
            setup_build_dir
            ;;
        
        valgrind)
            cpp_flags="$cpp_flags -DRDM_TAG_MALLOC"
            setup_build_dir
            ;;
        tag-profile)
            cpp_flags="$cpp_flags -DRDM_TAG_PROFILE"
            setup_build_dir
            ;;
        tag-fail)
            cpp_flags="$cpp_flags -DRDM_TAG_FAIL:BOOL=On"
            setup_build_dir
            ;;
        tag-trackex)
            cpp_flags="$cpp_flags -DRDM_TAG_TRACKEX"
            setup_build_dir
            ;;
        tag-list-of-lists)
            cpp_flags="$cpp_flags -DRDM_TAG_SUB_LIST_OF_LISTS"
            setup_build_dir
            ;;
        tag-bitmap)
            cpp_flags="$cpp_flags -DRDM_TAG_SUB_BITMAP"
            setup_build_dir
            ;;
        gdb)
            cpp_flags="$cpp_flags -DRDM_GDB_EMACS"
            setup_build_dir
            ;;
        m32)
            cpp_flags="$cpp_flags -m32"
            setup_build_dir
            ;;
        clean-cache-size-one)
            cpp_flags="$cpp_flags -DB_CACHE_PTR_NUM_ENTRIES_IN_ONE_BUCKET=1 -DRDM_DEFAULT_CACHESIZE=1"
            setup_build_dir
            ;;
        release-no-os)
            cmake_opt="$cmake_opt -DCMAKE_BUILD_TYPE:STRING=Release"
            cmake_opt="$cmake_opt -DRDM_NO_OS:BOOL=On"
            setup_build_dir
            ;;
        release-easy-profiler)
            cmake_opt="$cmake_opt -DCMAKE_BUILD_TYPE:STRING=ReleaseWithDebInfo"
            cmake_opt="$cmake_opt -DRDM_EASY_PROFILER:BOOL=On"
            setup_build_dir
            ;;
        no-os)
            cpp_flags="$cpp_flags -DRDM_NO_OS:BOOL=On"
            setup_build_dir
            ;;
        file-stdio)
            cpp_flags="$cpp_flags -DRDM_FILE_STDIO"
            setup_build_dir
            ;;
        verify-in-use)
            cpp_flags="$cpp_flags -DENABLE_PACK_VERIFY_INUSE"
            setup_build_dir
            ;;
        ndebug)
            cpp_flags="$cpp_flags -DNDEBUG"
            setup_build_dir
            ;;
        lint-misra)
            cpp_flags="$cpp_flags -DRDM_NO_OS:BOOL=On"
            CC=lint-misra
            CXX=lint-misra
            setup_build_dir
            ;;
        clang)
            cpp_flags=""
            CC=clang
            CXX=clang++
            setup_build_dir
            ;;
        lint)
            CC=lint
            CXX=lint
            setup_build_dir
            ;;
        b-cross-debug-*)
            build_cross_debug
            ;;
        b-cross-release-*)
            build_cross_release
            ;;
        b-target-*)
            build_target
            ;;
        target-debug-*)
            cmake_opt="$cmake_opt -DCMAKE_TOOLCHAIN_FILE=$PWD/target/${base#target-debug-}/toolchain.cmake"
            cmake_opt="$cmake_opt -DNATIVE_DIR=$PWD/cmake-build-debug"
            cmake_opt="$cmake_opt -DCMAKE_BUILD_TYPE:STRING=Debug"
            setup_build_dir
            ;;
        target-release-*)
            cmake_opt="$cmake_opt -DCMAKE_TOOLCHAIN_FILE=/home/sj/turin/target/${base#target-release-}/toolchain.cmake"
            cmake_opt="$cmake_opt -DCMAKE_BUILD_TYPE:STRING=Release"
            setup_build_dir
            ;;
        b-autosar-sim)
            build_autosar_sim
            ;;
        autosar-sim)
            cpp_flags="$cpp_flags -DRDM_AUTOSAR_SIM"
            setup_build_dir
            ;;
        debug-poll)
            cpp_flags="$cpp_flags -DRDM_TRANSPORT_SHM_POLL_NUM_USERS=10 -DRDM_TRANSPORT_HAVE_SHM_POLL"
            cmake_opt="$cmake_opt -DCMAKE_BUILD_TYPE:STRING=Debug"
            setup_build_dir
            ;;
        valgrind-poll)
            cpp_flags="$cpp_flags -DRDM_TRANSPORT_SHM_POLL_NUM_USERS=10 -DRDM_TRANSPORT_HAVE_SHM_POLL -DRDM_TAG_MALLOC"
            cmake_opt="$cmake_opt -DCMAKE_BUILD_TYPE:STRING=Debug"
            setup_build_dir
            ;;
        b-gnu)
            mkdir b-gnu
            cd b-gnu
            $(pwd)/../configure --disable-shared
            ;;
        *)
            echo "Error: Not a supported directory: $base"
            exit
    esac
}

parse_command_line "$@"


